/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Auth1CheckuninstallpwdReq;
import io.swagger.model.Auth1CheckuninstallpwdRes;
import io.swagger.model.Auth1ExtloginclientReq;
import io.swagger.model.Auth1ExtloginclientRes;
import io.swagger.model.Auth1GetbyadsessionReq;
import io.swagger.model.Auth1GetbyadsessionRes;
import io.swagger.model.Auth1GetbythirdpartyReq;
import io.swagger.model.Auth1GetbythirdpartyRes;
import io.swagger.model.Auth1GetbyticketReq;
import io.swagger.model.Auth1GetbyticketRes;
import io.swagger.model.Auth1GetconfigRes;
import io.swagger.model.Auth1GetextappinfoReq;
import io.swagger.model.Auth1GetextappinfoRes;
import io.swagger.model.Auth1GetnewReq;
import io.swagger.model.Auth1GetnewRes;
import io.swagger.model.Auth1GetoauthinfoRes;
import io.swagger.model.Auth1GetvcodeReq;
import io.swagger.model.Auth1GetvcodeRes;
import io.swagger.model.Auth1LogoutReq;
import io.swagger.model.Auth1ModifypasswordReq;
import io.swagger.model.Auth1RefreshtokenReq;
import io.swagger.model.Auth1RefreshtokenRes;
import io.swagger.model.Auth1RevoketokenReq;
import io.swagger.model.Auth1SelfregistrationReq;
import io.swagger.model.Auth1SelfregistrationRes;
import io.swagger.model.Auth1SendauthvcodeReq;
import io.swagger.model.Auth1SendauthvcodeRes;
import io.swagger.model.Auth1ValidatesecuritydeviceReq;
import io.swagger.model.Auth1ValidatesecuritydeviceRes;
import io.swagger.model.Error;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-09-10T06:15:45.348Z[GMT]")
@Api(value = "auth1", description = "the auth1 API")
public interface Auth1Api {

    @ApiOperation(value = "PC客户端卸载输入口令", nickname = "auth1CheckuninstallpwdPost", notes = "", response = Auth1CheckuninstallpwdRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1CheckuninstallpwdRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/checkuninstallpwd",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Auth1CheckuninstallpwdRes> auth1CheckuninstallpwdPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1CheckuninstallpwdReq body
);


    @ApiOperation(value = "登录（信任的第三方应用appid）", nickname = "auth1ExtloginclientPost", notes = "", response = Auth1ExtloginclientRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1ExtloginclientRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/extloginclient",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Auth1ExtloginclientRes> auth1ExtloginclientPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1ExtloginclientReq body
);


    @ApiOperation(value = "登录（使用windows登录凭据）", nickname = "auth1GetbyadsessionPost", notes = "", response = Auth1GetbyadsessionRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1GetbyadsessionRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/getbyadsession",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Auth1GetbyadsessionRes> auth1GetbyadsessionPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1GetbyadsessionReq body
);


    @ApiOperation(value = "登录（使用第三方凭证）", nickname = "auth1GetbythirdpartyPost", notes = "", response = Auth1GetbythirdpartyRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1GetbythirdpartyRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/getbythirdparty",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Auth1GetbythirdpartyRes> auth1GetbythirdpartyPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1GetbythirdpartyReq body
);


    @ApiOperation(value = "登录（西电ticket）", nickname = "auth1GetbyticketPost", notes = "", response = Auth1GetbyticketRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1GetbyticketRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/getbyticket",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Auth1GetbyticketRes> auth1GetbyticketPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1GetbyticketReq body
);


    @ApiOperation(value = "获取服务器配置信息", nickname = "auth1GetconfigPost", notes = "", response = Auth1GetconfigRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1GetconfigRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/getconfig",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Auth1GetconfigRes> auth1GetconfigPost();


    @ApiOperation(value = "登录外部应用（集成到anyshare）", nickname = "auth1GetextappinfoPost", notes = "", response = Auth1GetextappinfoRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1GetextappinfoRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/getextappinfo",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Auth1GetextappinfoRes> auth1GetextappinfoPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1GetextappinfoReq body
);


    @ApiOperation(value = "登录（标准）", nickname = "auth1GetnewPost", notes = "备注：默认获取到的token有效期为1小时。  密码加密方式：目前采用rsa加密的RSA_PKCS1_PADDING填充，并将加密的结果base64编码。  公钥文件：随本文档一同发出，或者邮件索取。", response = Auth1GetnewRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1GetnewRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/getnew",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Auth1GetnewRes> auth1GetnewPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1GetnewReq body
);


    @ApiOperation(value = "获取OAuth信息", nickname = "auth1GetoauthinfoPost", notes = "", response = Auth1GetoauthinfoRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1GetoauthinfoRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/getoauthinfo",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Auth1GetoauthinfoRes> auth1GetoauthinfoPost();


    @ApiOperation(value = "获取验证码", nickname = "auth1GetvcodePost", notes = "", response = Auth1GetvcodeRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1GetvcodeRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/getvcode",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Auth1GetvcodeRes> auth1GetvcodePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1GetvcodeReq body
);


    @ApiOperation(value = "登出", nickname = "auth1LogoutPost", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功"),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/logout",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> auth1LogoutPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1LogoutReq body
);


    @ApiOperation(value = "修改用户密码", nickname = "auth1ModifypasswordPost", notes = "备注：用户旧密码和新密码采用RSA加密", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功"),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/modifypassword",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> auth1ModifypasswordPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1ModifypasswordReq body
,@ApiParam(value = "签名") @Valid @RequestParam(value = "sign", required = false) String sign
);


    @ApiOperation(value = "刷新身份凭证有效期", nickname = "auth1RefreshtokenPost", notes = "", response = Auth1RefreshtokenRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1RefreshtokenRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/refreshtoken",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Auth1RefreshtokenRes> auth1RefreshtokenPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1RefreshtokenReq body
);


    @ApiOperation(value = "回收身份凭证", nickname = "auth1RevoketokenPost", notes = "回收身份凭证，主要用于移动端退出登陆时，回收永久token", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功"),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/revoketoken",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> auth1RevoketokenPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1RevoketokenReq body
);


    @ApiOperation(value = "用户自注册", nickname = "auth1SelfregistrationPost", notes = "", response = Auth1SelfregistrationRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1SelfregistrationRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/selfregistration",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Auth1SelfregistrationRes> auth1SelfregistrationPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1SelfregistrationReq body
);


    @ApiOperation(value = "发送短信验证码（双因子登录）", nickname = "auth1SendauthvcodePost", notes = "备注：向用户发送登录验证码", response = Auth1SendauthvcodeRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1SendauthvcodeRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/sendauthvcode",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Auth1SendauthvcodeRes> auth1SendauthvcodePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1SendauthvcodeReq body
);


    @ApiOperation(value = "二次安全设备认证", nickname = "auth1ValidatesecuritydevicePost", notes = "", response = Auth1ValidatesecuritydeviceRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "身份认证", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = Auth1ValidatesecuritydeviceRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/auth1/validatesecuritydevice",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Auth1ValidatesecuritydeviceRes> auth1ValidatesecuritydevicePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Auth1ValidatesecuritydeviceReq body
);

}

