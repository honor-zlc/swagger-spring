/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DirAddtagReq;
import io.swagger.model.DirAddtagsReq;
import io.swagger.model.DirAddtagsRes;
import io.swagger.model.DirAttributeReq;
import io.swagger.model.DirAttributeRes;
import io.swagger.model.DirCheckwatermarkReq;
import io.swagger.model.DirCheckwatermarkRes;
import io.swagger.model.DirCopyReq;
import io.swagger.model.DirCopyRes;
import io.swagger.model.DirCopyprogressReq;
import io.swagger.model.DirCopyprogressRes;
import io.swagger.model.DirCreateReq;
import io.swagger.model.DirCreateRes;
import io.swagger.model.DirCreatemultileveldirReq;
import io.swagger.model.DirCreatemultileveldirRes;
import io.swagger.model.DirDeleteReq;
import io.swagger.model.DirDeleteRes;
import io.swagger.model.DirDeletetagReq;
import io.swagger.model.DirGetsuggestnameReq;
import io.swagger.model.DirGetsuggestnameRes;
import io.swagger.model.DirIsfileoutboxReq;
import io.swagger.model.DirIsfileoutboxRes;
import io.swagger.model.DirListReq;
import io.swagger.model.DirListRes;
import io.swagger.model.DirMoveReq;
import io.swagger.model.DirMoveRes;
import io.swagger.model.DirRenameReq;
import io.swagger.model.DirRenameRes;
import io.swagger.model.DirSetcsflevelReq;
import io.swagger.model.DirSetcsflevelRes;
import io.swagger.model.DirSizeReq;
import io.swagger.model.DirSizeRes;
import io.swagger.model.Error;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-09-10T06:15:45.348Z[GMT]")
@Api(value = "dir", description = "the dir API")
public interface DirApi {

    @ApiOperation(value = "添加目录标签", nickname = "dirAddtagPost", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功"),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/addtag",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dirAddtagPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirAddtagReq body
);


    @ApiOperation(value = "添加目录多个标签", nickname = "dirAddtagsPost", notes = "", response = DirAddtagsRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirAddtagsRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/addtags",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirAddtagsRes> dirAddtagsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirAddtagsReq body
);


    @ApiOperation(value = "获取目录属性协议", nickname = "dirAttributePost", notes = "", response = DirAttributeRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirAttributeRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/attribute",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirAttributeRes> dirAttributePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirAttributeReq body
);


    @ApiOperation(value = "检查是否需要下载水印", nickname = "dirCheckwatermarkPost", notes = "", response = DirCheckwatermarkRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirCheckwatermarkRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/checkwatermark",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirCheckwatermarkRes> dirCheckwatermarkPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirCheckwatermarkReq body
);


    @ApiOperation(value = "复制目录协议", nickname = "dirCopyPost", notes = "无法复制到原位置的子目录下", response = DirCopyRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirCopyRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/copy",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirCopyRes> dirCopyPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirCopyReq body
);


    @ApiOperation(value = "复制目录进度查询协议", nickname = "dirCopyprogressPost", notes = "", response = DirCopyprogressRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirCopyprogressRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/copyprogress",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirCopyprogressRes> dirCopyprogressPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirCopyprogressReq body
);


    @ApiOperation(value = "创建目录协议", nickname = "dirCreatePost", notes = "", response = DirCreateRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功  ", response = DirCreateRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirCreateRes> dirCreatePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirCreateReq body
);


    @ApiOperation(value = "创建多级目录协议", nickname = "dirCreatemultileveldirPost", notes = "", response = DirCreatemultileveldirRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirCreatemultileveldirRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/createmultileveldir",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirCreatemultileveldirRes> dirCreatemultileveldirPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirCreatemultileveldirReq body
);


    @ApiOperation(value = "删除目录协议", nickname = "dirDeletePost", notes = "", response = DirDeleteRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirDeleteRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/delete",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirDeleteRes> dirDeletePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirDeleteReq body
);


    @ApiOperation(value = "删除目录标签", nickname = "dirDeletetagPost", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功"),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/deletetag",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dirDeletetagPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirDeletetagReq body
);


    @ApiOperation(value = "获取创建目录的建议名称", nickname = "dirGetsuggestnamePost", notes = "", response = DirGetsuggestnameRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirGetsuggestnameRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/getsuggestname",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirGetsuggestnameRes> dirGetsuggestnamePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirGetsuggestnameReq body
);


    @ApiOperation(value = "检查是否是发件箱协议", nickname = "dirIsfileoutboxPost", notes = "", response = DirIsfileoutboxRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirIsfileoutboxRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/isfileoutbox",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirIsfileoutboxRes> dirIsfileoutboxPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirIsfileoutboxReq body
);


    @ApiOperation(value = "浏览目录协议", nickname = "dirListPost", notes = "", response = DirListRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirListRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/list",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirListRes> dirListPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirListReq body
);


    @ApiOperation(value = "移动目录协议", nickname = "dirMovePost", notes = "1. 无法移动到原位置（指定目标父对象为待移动对象的父对象）；  2. 无法移动到原位置的子对象下；  ", response = DirMoveRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirMoveRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/move",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirMoveRes> dirMovePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirMoveReq body
);


    @ApiOperation(value = "重命名目录协议", nickname = "dirRenamePost", notes = "", response = DirRenameRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirRenameRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/rename",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirRenameRes> dirRenamePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirRenameReq body
);


    @ApiOperation(value = "设置目录密级", nickname = "dirSetcsflevelPost", notes = "目录没有密级，该协议将目录及子目录下所有文件设置为指定的密级，但无法应用到高于操作者自身密级的文件", response = DirSetcsflevelRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirSetcsflevelRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/setcsflevel",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirSetcsflevelRes> dirSetcsflevelPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirSetcsflevelReq body
);


    @ApiOperation(value = "获取目录大小协议", nickname = "dirSizePost", notes = "", response = DirSizeRes.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "目录协议", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "接口调用成功", response = DirSizeRes.class),
        @ApiResponse(code = 400, message = "接口调用失败，HTTP状态码可能为4xx、5xx，具体参见错误码说明章节", response = Error.class) })
    @RequestMapping(value = "/dir/size",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<DirSizeRes> dirSizePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody DirSizeReq body
);

}

